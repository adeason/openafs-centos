# rpmlint configuration file for OpenAFS
#
# Run rpmlint against OpenAFS RPMs with '-f rpmlint.config' to silence
# false-positives, and errors and warnings we don't care about.

# Small helper to just make ignoring rules a little easier to read.
def _ignore(pkg, rule):
    addFilter("^%s[.][^:]+: %s$" % (pkg, rule))

# The following ignore rules aren't in a very strict order, but I try to keep
# the more "obvious" ones near the top (the ones where we obviously cannot fix
# the underlying "issue" and must suppress the warning or error).

# openafs-debuginfo puts debug symbol packages in /usr/lib. This package is
# autogenerated by rpm for us, so I don't think we can do anything about this.
_ignore("openafs-debuginfo", "W: only-non-binary-in-usr-lib")

# We put systemd unit files in /usr/lib; no way around that.
_ignore("openafs-client", "W: only-non-binary-in-usr-lib")
_ignore("openafs-server", "W: only-non-binary-in-usr-lib")

# rpmlint things dafssync-debug is a development package because its name ends
# with "-debug". It's not a devel package, so this error is bogus.
_ignore("openafs-transarc-server", "E: devel-dependency /usr/sbin/dafssync-debug")

# These warnings are because we are creating "non-standard" directories in
# /usr, like /usr/afs/. We know these are non-standard, and they are just
# there for compatibility.
_ignore("openafs-compat", "W: non-standard-dir-in-usr afsws")
_ignore("openafs-transarc-client", "W: non-standard-dir-in-usr vice")
_ignore("openafs-transarc-server", "W: non-standard-dir-in-usr afs")

# These packages just contain symlinks; it doesn't really seem useful to
# include documentation in them.
_ignore("openafs-compat", "W: no-documentation")
_ignore("openafs-transarc-client", "W: no-documentation")
_ignore("openafs-transarc-server", "W: no-documentation")

# Upstream OpenAFS links libafsauthent to libcom_err, because that is what
# libkrb5 tells us to. There's no immediately obvious way to avoid this.
_ignore("openafs-authlibs", "W: unused-direct-shlib-dependency .*libafsauthent[.]so.*libcom_err[.]so.*")

# These are intentionally hidden.
_ignore("openafs-client", "W: hidden-file-or-dir .*/openafs/[.]CellServDB[.]tmp")
_ignore("openafs-client", "W: hidden-file-or-dir .*/openafs/[.]CellServDB[.]stamp")

# This file is intentionally empty. The administrator can populate it with
# local CellServDB info if desired, but otherwise it should be empty.
_ignore("openafs-client", "E: zero-length .*/openafs/CellServDB[.]local")

# These permissions are intentional; this is to ensure that unauthenticated
# users cannot get into these directories. Some upstream code will complain if
# these dirs are not of these permissions.
_ignore("openafs-server", "E: non-standard-dir-perm .*/lib/openafs/local 0700L")
_ignore("openafs-server", "E: non-standard-dir-perm .*/lib/openafs/db 0700L")
_ignore("openafs-server", "E: non-standard-dir-perm .*/lib/openafs/backup 0700L")

# OpenAFS does its own log rotation, if the logging in this directory is used.
_ignore("openafs-server", "W: log-files-without-logrotate .*/log/openafs")

# This is indeed an empty file in upstream. For other platforms it's not empty,
# but for Linux it is.
_ignore("openafs-devel", "E: zero-length .*/include/afs/osi_inode[.]h")

# It's not great that we call exit() in this, but it's what the upstream code
# does. This is probably a result of an assert() or osi_Panic() or something
# similar, so it's not a normal exit.
_ignore("openafs-authlibs", "W: shared-lib-calls-exit .*libafsauthent.* exit@.*")

# We have no documentation for these currently.
_ignore("openafs-authlibs", "W: no-documentation")
_ignore("openafs-authlibs-devel", "W: no-documentation")

# There are currently no manpages for these.
_ignore("openafs", "W: no-manual-page-for-binary afsio")
_ignore("openafs-server", "W: no-manual-page-for-binary salvsync-debug")

# rpmlint doesn't recognize '.el7.centos' as a release extension, only the
# .el7 part. This makes it think that our latest changelog entry is wrong
# on CentOS, since it sees e.g. 1.6.10-1, but it looks for
# '1.6.10-1.el7.centos' or '1.6.10-1.centos'. To make it look for '1.6.10-1'
# instead, here we add some more regex to ReleaseExtension to get it to
# recognize the full .el7.centos suffix.

relext = "[.]el\d+[.]centos(?=[.]|$)"

old_relext = getOption("ReleaseExtension", None)
if old_relext is not None:
    setOption("ReleaseExtension", "%s|(?:%s)" % (relext, old_relext))
else:
    setOption("ReleaseExtension", relext)
